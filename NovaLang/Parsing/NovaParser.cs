//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Nova.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NovaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PACKAGE=1, MODULE=2, LET=3, I16=4, ID=5, PLUS=6, MINUS=7, MULT=8, DIV=9, 
		MOD=10, LPAR=11, RPAR=12, COLON=13, SEMI=14, LBRA=15, RBRA=16, EQ=17, 
		LT=18, GT=19, LTE=20, GTE=21, NEWLINE=22, WS=23;
	public const int
		RULE_expr = 0, RULE_container = 1, RULE_package = 2, RULE_module = 3, 
		RULE_let = 4, RULE_literal = 5, RULE_binary = 6, RULE_addition = 7, RULE_multiplication = 8, 
		RULE_atom = 9;
	public static readonly string[] ruleNames = {
		"expr", "container", "package", "module", "let", "literal", "binary", 
		"addition", "multiplication", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'package'", "'module'", "'let'", null, null, "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'('", "')'", "':'", "';'", "'{'", "'}'", "'='", "'<'", 
		"'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PACKAGE", "MODULE", "LET", "I16", "ID", "PLUS", "MINUS", "MULT", 
		"DIV", "MOD", "LPAR", "RPAR", "COLON", "SEMI", "LBRA", "RBRA", "EQ", "LT", 
		"GT", "LTE", "GTE", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nova.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NovaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NovaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NovaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 0, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			let();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainerContext container() {
		ContainerContext _localctx = new ContainerContext(Context, State);
		EnterRule(_localctx, 2, RULE_container);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
				{
				State = 22;
				module();
				}
				break;
			case LET:
				{
				State = 23;
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(NovaParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NovaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRA() { return GetToken(NovaParser.LBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRA() { return GetToken(NovaParser.RBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NovaParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NovaParser.NEWLINE, i);
		}
		public PackageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageContext package() {
		PackageContext _localctx = new PackageContext(Context, State);
		EnterRule(_localctx, 4, RULE_package);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			Match(PACKAGE);
			State = 27;
			Match(ID);
			State = 28;
			Match(LBRA);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODULE) {
				{
				{
				State = 29;
				module();
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 30;
					Match(NEWLINE);
					}
					}
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 41;
			Match(RBRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(NovaParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NovaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRA() { return GetToken(NovaParser.LBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRA() { return GetToken(NovaParser.RBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContainerContext[] container() {
			return GetRuleContexts<ContainerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainerContext container(int i) {
			return GetRuleContext<ContainerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NovaParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NovaParser.NEWLINE, i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 6, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(MODULE);
			State = 44;
			Match(ID);
			State = 45;
			Match(LBRA);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODULE || _la==LET) {
				{
				{
				State = 46;
				container();
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 47;
					Match(NEWLINE);
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(RBRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(NovaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NovaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NovaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRA() { return GetToken(NovaParser.LBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRA() { return GetToken(NovaParser.RBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NovaParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NovaParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(NovaParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(NovaParser.SEMI, i);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 8, RULE_let);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(LET);
			State = 61;
			Match(ID);
			State = 62;
			Match(EQ);
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRA:
				{
				State = 63;
				Match(LBRA);
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 64;
					Match(NEWLINE);
					}
					}
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LET) {
					{
					{
					State = 70;
					expr();
					State = 80;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 74;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NEWLINE) {
							{
							{
							State = 71;
							Match(NEWLINE);
							}
							}
							State = 76;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case 2:
						{
						State = 78;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SEMI) {
							{
							State = 77;
							Match(SEMI);
							}
						}

						}
						break;
					}
					}
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 89;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 87;
					literal();
					}
					break;
				case 2:
					{
					State = 88;
					binary();
					}
					break;
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 91;
					Match(NEWLINE);
					}
					}
					State = 96;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 97;
				Match(RBRA);
				}
				break;
			case I16:
			case LPAR:
				{
				State = 101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 99;
					literal();
					}
					break;
				case 2:
					{
					State = 100;
					binary();
					}
					break;
				}
				State = 112;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 106;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 103;
							Match(NEWLINE);
							}
							} 
						}
						State = 108;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
					}
					}
					break;
				case 2:
					{
					State = 110;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						State = 109;
						Match(SEMI);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(NovaParser.I16, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 10, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(I16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 12, RULE_binary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			addition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationContext[] multiplication() {
			return GetRuleContexts<MultiplicationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationContext multiplication(int i) {
			return GetRuleContext<MultiplicationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(NovaParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(NovaParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(NovaParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(NovaParser.MINUS, i);
		}
		public AdditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionContext addition() {
		AdditionContext _localctx = new AdditionContext(Context, State);
		EnterRule(_localctx, 14, RULE_addition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			multiplication();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 121;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 122;
				multiplication();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(NovaParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(NovaParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(NovaParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(NovaParser.DIV, i);
		}
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		MultiplicationContext _localctx = new MultiplicationContext(Context, State);
		EnterRule(_localctx, 16, RULE_multiplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			atom();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULT || _la==DIV) {
				{
				{
				State = 129;
				_la = TokenStream.LA(1);
				if ( !(_la==MULT || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 130;
				atom();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(NovaParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(NovaParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(NovaParser.RPAR, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 18, RULE_atom);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case I16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				Match(I16);
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				Match(LPAR);
				State = 138;
				binary();
				State = 139;
				Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,23,144,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,3,1,25,8,1,1,2,1,2,1,2,1,2,1,2,5,2,
		32,8,2,10,2,12,2,35,9,2,5,2,37,8,2,10,2,12,2,40,9,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,3,5,3,49,8,3,10,3,12,3,52,9,3,5,3,54,8,3,10,3,12,3,57,9,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,5,4,66,8,4,10,4,12,4,69,9,4,1,4,1,4,5,4,73,8,4,
		10,4,12,4,76,9,4,1,4,3,4,79,8,4,3,4,81,8,4,5,4,83,8,4,10,4,12,4,86,9,4,
		1,4,1,4,3,4,90,8,4,1,4,5,4,93,8,4,10,4,12,4,96,9,4,1,4,1,4,1,4,1,4,3,4,
		102,8,4,1,4,5,4,105,8,4,10,4,12,4,108,9,4,1,4,3,4,111,8,4,3,4,113,8,4,
		3,4,115,8,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,5,7,124,8,7,10,7,12,7,127,9,7,
		1,8,1,8,1,8,5,8,132,8,8,10,8,12,8,135,9,8,1,9,1,9,1,9,1,9,1,9,3,9,142,
		8,9,1,9,0,0,10,0,2,4,6,8,10,12,14,16,18,0,2,1,0,6,7,1,0,8,9,153,0,20,1,
		0,0,0,2,24,1,0,0,0,4,26,1,0,0,0,6,43,1,0,0,0,8,60,1,0,0,0,10,116,1,0,0,
		0,12,118,1,0,0,0,14,120,1,0,0,0,16,128,1,0,0,0,18,141,1,0,0,0,20,21,3,
		8,4,0,21,1,1,0,0,0,22,25,3,6,3,0,23,25,3,0,0,0,24,22,1,0,0,0,24,23,1,0,
		0,0,25,3,1,0,0,0,26,27,5,1,0,0,27,28,5,5,0,0,28,38,5,15,0,0,29,33,3,6,
		3,0,30,32,5,22,0,0,31,30,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,
		0,0,34,37,1,0,0,0,35,33,1,0,0,0,36,29,1,0,0,0,37,40,1,0,0,0,38,36,1,0,
		0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,42,5,16,0,0,42,5,1,0,
		0,0,43,44,5,2,0,0,44,45,5,5,0,0,45,55,5,15,0,0,46,50,3,2,1,0,47,49,5,22,
		0,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,54,1,0,
		0,0,52,50,1,0,0,0,53,46,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,
		0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,59,5,16,0,0,59,7,1,0,0,0,60,61,5,3,
		0,0,61,62,5,5,0,0,62,114,5,17,0,0,63,67,5,15,0,0,64,66,5,22,0,0,65,64,
		1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,84,1,0,0,0,69,67,
		1,0,0,0,70,80,3,0,0,0,71,73,5,22,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,
		1,0,0,0,74,75,1,0,0,0,75,81,1,0,0,0,76,74,1,0,0,0,77,79,5,14,0,0,78,77,
		1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,74,1,0,0,0,80,78,1,0,0,0,81,83,
		1,0,0,0,82,70,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,89,
		1,0,0,0,86,84,1,0,0,0,87,90,3,10,5,0,88,90,3,12,6,0,89,87,1,0,0,0,89,88,
		1,0,0,0,90,94,1,0,0,0,91,93,5,22,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,
		1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,94,1,0,0,0,97,98,5,16,0,0,98,115,
		1,0,0,0,99,102,3,10,5,0,100,102,3,12,6,0,101,99,1,0,0,0,101,100,1,0,0,
		0,102,112,1,0,0,0,103,105,5,22,0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,
		104,1,0,0,0,106,107,1,0,0,0,107,113,1,0,0,0,108,106,1,0,0,0,109,111,5,
		14,0,0,110,109,1,0,0,0,110,111,1,0,0,0,111,113,1,0,0,0,112,106,1,0,0,0,
		112,110,1,0,0,0,113,115,1,0,0,0,114,63,1,0,0,0,114,101,1,0,0,0,115,9,1,
		0,0,0,116,117,5,4,0,0,117,11,1,0,0,0,118,119,3,14,7,0,119,13,1,0,0,0,120,
		125,3,16,8,0,121,122,7,0,0,0,122,124,3,16,8,0,123,121,1,0,0,0,124,127,
		1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,15,1,0,0,0,127,125,1,0,0,0,
		128,133,3,18,9,0,129,130,7,1,0,0,130,132,3,18,9,0,131,129,1,0,0,0,132,
		135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,17,1,0,0,0,135,133,1,0,
		0,0,136,142,5,4,0,0,137,138,5,11,0,0,138,139,3,12,6,0,139,140,5,12,0,0,
		140,142,1,0,0,0,141,136,1,0,0,0,141,137,1,0,0,0,142,19,1,0,0,0,20,24,33,
		38,50,55,67,74,78,80,84,89,94,101,106,110,112,114,125,133,141
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
