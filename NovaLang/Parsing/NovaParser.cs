//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Nova.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NovaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PACKAGE=1, MODULE=2, LET=3, LAMBDA=4, I16=5, ID=6, ARROW=7, PLUS=8, MINUS=9, 
		MULT=10, DIV=11, MOD=12, LPAR=13, RPAR=14, COLON=15, SEMI=16, LBRA=17, 
		RBRA=18, EQ=19, LT=20, GT=21, LTE=22, GTE=23, NEWLINE=24, WS=25;
	public const int
		RULE_expr = 0, RULE_container = 1, RULE_package = 2, RULE_module = 3, 
		RULE_let = 4, RULE_lambda = 5, RULE_paramList = 6, RULE_literal = 7, RULE_binary = 8, 
		RULE_addition = 9, RULE_multiplication = 10, RULE_atom = 11, RULE_identifier = 12;
	public static readonly string[] ruleNames = {
		"expr", "container", "package", "module", "let", "lambda", "paramList", 
		"literal", "binary", "addition", "multiplication", "atom", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'package'", "'module'", "'let'", "'\\'", null, null, "'=>'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'('", "')'", "':'", "';'", "'{'", "'}'", 
		"'='", "'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PACKAGE", "MODULE", "LET", "LAMBDA", "I16", "ID", "ARROW", "PLUS", 
		"MINUS", "MULT", "DIV", "MOD", "LPAR", "RPAR", "COLON", "SEMI", "LBRA", 
		"RBRA", "EQ", "LT", "GT", "LTE", "GTE", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nova.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NovaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NovaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NovaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 0, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			let();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainerContext container() {
		ContainerContext _localctx = new ContainerContext(Context, State);
		EnterRule(_localctx, 2, RULE_container);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
				{
				State = 28;
				module();
				}
				break;
			case LET:
				{
				State = 29;
				expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(NovaParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NovaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRA() { return GetToken(NovaParser.LBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRA() { return GetToken(NovaParser.RBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NovaParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NovaParser.NEWLINE, i);
		}
		public PackageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageContext package() {
		PackageContext _localctx = new PackageContext(Context, State);
		EnterRule(_localctx, 4, RULE_package);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(PACKAGE);
			State = 33;
			Match(ID);
			State = 34;
			Match(LBRA);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODULE) {
				{
				{
				State = 35;
				module();
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 36;
					Match(NEWLINE);
					}
					}
					State = 41;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 47;
			Match(RBRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(NovaParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NovaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRA() { return GetToken(NovaParser.LBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRA() { return GetToken(NovaParser.RBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContainerContext[] container() {
			return GetRuleContexts<ContainerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainerContext container(int i) {
			return GetRuleContext<ContainerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NovaParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NovaParser.NEWLINE, i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 6, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(MODULE);
			State = 50;
			Match(ID);
			State = 51;
			Match(LBRA);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODULE || _la==LET) {
				{
				{
				State = 52;
				container();
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 53;
					Match(NEWLINE);
					}
					}
					State = 58;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			Match(RBRA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(NovaParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NovaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(NovaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRA() { return GetToken(NovaParser.LBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRA() { return GetToken(NovaParser.RBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NovaParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NovaParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(NovaParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(NovaParser.SEMI, i);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 8, RULE_let);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(LET);
			State = 67;
			Match(ID);
			State = 68;
			Match(EQ);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 69;
				Match(NEWLINE);
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 75;
				lambda();
				State = 85;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 79;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 76;
							Match(NEWLINE);
							}
							} 
						}
						State = 81;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
					}
					}
					break;
				case 2:
					{
					State = 83;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 82;
						Match(SEMI);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 87;
				Match(LBRA);
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 88;
					Match(NEWLINE);
					}
					}
					State = 93;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LET) {
					{
					{
					State = 94;
					expr();
					State = 104;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						State = 98;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NEWLINE) {
							{
							{
							State = 95;
							Match(NEWLINE);
							}
							}
							State = 100;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case 2:
						{
						State = 102;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SEMI) {
							{
							State = 101;
							Match(SEMI);
							}
						}

						}
						break;
					}
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 113;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 111;
					atom();
					}
					break;
				case 2:
					{
					State = 112;
					binary();
					}
					break;
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 115;
					Match(NEWLINE);
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 121;
				Match(RBRA);
				}
				break;
			case 3:
				{
				State = 125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 123;
					atom();
					}
					break;
				case 2:
					{
					State = 124;
					binary();
					}
					break;
				}
				State = 136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 130;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 127;
							Match(NEWLINE);
							}
							} 
						}
						State = 132;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
					}
					}
					break;
				case 2:
					{
					State = 134;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						State = 133;
						Match(SEMI);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(NovaParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(NovaParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(NovaParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(NovaParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NovaParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NovaParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NovaParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRA() { return GetToken(NovaParser.LBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRA() { return GetToken(NovaParser.RBRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(NovaParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(NovaParser.RPAR, 0); }
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 10, RULE_lambda);
		int _la;
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				Match(LAMBDA);
				State = 141;
				paramList();
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 142;
					Match(NEWLINE);
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 148;
				Match(ARROW);
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 149;
					Match(NEWLINE);
					}
					}
					State = 154;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 158;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 155;
					literal();
					}
					break;
				case 2:
					{
					State = 156;
					binary();
					}
					break;
				case 3:
					{
					State = 157;
					Match(ID);
					}
					break;
				}
				State = 160;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMI || _la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162;
				Match(LAMBDA);
				State = 163;
				paramList();
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 164;
					Match(NEWLINE);
					}
					}
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 170;
				Match(ARROW);
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 171;
					Match(NEWLINE);
					}
					}
					State = 176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 177;
				Match(LBRA);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 178;
					Match(NEWLINE);
					}
					}
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LET) {
					{
					{
					State = 184;
					expr();
					State = 194;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						State = 188;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==NEWLINE) {
							{
							{
							State = 185;
							Match(NEWLINE);
							}
							}
							State = 190;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case 2:
						{
						State = 192;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SEMI) {
							{
							State = 191;
							Match(SEMI);
							}
						}

						}
						break;
					}
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 201;
					lambda();
					}
					break;
				case 2:
					{
					State = 207;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 202;
						binary();
						}
						break;
					case 2:
						{
						State = 203;
						Match(LPAR);
						State = 204;
						binary();
						State = 205;
						Match(RPAR);
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 209;
					literal();
					}
					break;
				case 4:
					{
					State = 210;
					identifier();
					}
					break;
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 213;
					Match(NEWLINE);
					}
					}
					State = 218;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 219;
				Match(RBRA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(NovaParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(NovaParser.ID, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(ID);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 224;
				Match(ID);
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(NovaParser.I16, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(I16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionContext addition() {
			return GetRuleContext<AdditionContext>(0);
		}
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_binary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			addition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationContext[] multiplication() {
			return GetRuleContexts<MultiplicationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationContext multiplication(int i) {
			return GetRuleContext<MultiplicationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(NovaParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(NovaParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(NovaParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(NovaParser.MINUS, i);
		}
		public AdditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionContext addition() {
		AdditionContext _localctx = new AdditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_addition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			multiplication();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 235;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 236;
				multiplication();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(NovaParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(NovaParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(NovaParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(NovaParser.DIV, i);
		}
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		MultiplicationContext _localctx = new MultiplicationContext(Context, State);
		EnterRule(_localctx, 20, RULE_multiplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			atom();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULT || _la==DIV) {
				{
				{
				State = 243;
				_la = TokenStream.LA(1);
				if ( !(_la==MULT || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 244;
				atom();
				}
				}
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(NovaParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(NovaParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(NovaParser.I16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 22, RULE_atom);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAMBDA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				lambda();
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(LPAR);
				State = 252;
				binary();
				State = 253;
				Match(RPAR);
				}
				break;
			case I16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				Match(I16);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 256;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NovaParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INovaVisitor<TResult> typedVisitor = visitor as INovaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,25,262,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,3,1,
		31,8,1,1,2,1,2,1,2,1,2,1,2,5,2,38,8,2,10,2,12,2,41,9,2,5,2,43,8,2,10,2,
		12,2,46,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,5,3,55,8,3,10,3,12,3,58,9,3,5,
		3,60,8,3,10,3,12,3,63,9,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,71,8,4,10,4,12,4,
		74,9,4,1,4,1,4,5,4,78,8,4,10,4,12,4,81,9,4,1,4,3,4,84,8,4,3,4,86,8,4,1,
		4,1,4,5,4,90,8,4,10,4,12,4,93,9,4,1,4,1,4,5,4,97,8,4,10,4,12,4,100,9,4,
		1,4,3,4,103,8,4,3,4,105,8,4,5,4,107,8,4,10,4,12,4,110,9,4,1,4,1,4,3,4,
		114,8,4,1,4,5,4,117,8,4,10,4,12,4,120,9,4,1,4,1,4,1,4,1,4,3,4,126,8,4,
		1,4,5,4,129,8,4,10,4,12,4,132,9,4,1,4,3,4,135,8,4,3,4,137,8,4,3,4,139,
		8,4,1,5,1,5,1,5,5,5,144,8,5,10,5,12,5,147,9,5,1,5,1,5,5,5,151,8,5,10,5,
		12,5,154,9,5,1,5,1,5,1,5,3,5,159,8,5,1,5,1,5,1,5,1,5,1,5,5,5,166,8,5,10,
		5,12,5,169,9,5,1,5,1,5,5,5,173,8,5,10,5,12,5,176,9,5,1,5,1,5,5,5,180,8,
		5,10,5,12,5,183,9,5,1,5,1,5,5,5,187,8,5,10,5,12,5,190,9,5,1,5,3,5,193,
		8,5,3,5,195,8,5,5,5,197,8,5,10,5,12,5,200,9,5,1,5,1,5,1,5,1,5,1,5,1,5,
		3,5,208,8,5,1,5,1,5,3,5,212,8,5,1,5,5,5,215,8,5,10,5,12,5,218,9,5,1,5,
		1,5,3,5,222,8,5,1,6,1,6,5,6,226,8,6,10,6,12,6,229,9,6,1,7,1,7,1,8,1,8,
		1,9,1,9,1,9,5,9,238,8,9,10,9,12,9,241,9,9,1,10,1,10,1,10,5,10,246,8,10,
		10,10,12,10,249,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,258,8,11,
		1,12,1,12,1,12,0,0,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,3,2,0,16,16,
		24,24,1,0,8,9,1,0,10,11,293,0,26,1,0,0,0,2,30,1,0,0,0,4,32,1,0,0,0,6,49,
		1,0,0,0,8,66,1,0,0,0,10,221,1,0,0,0,12,223,1,0,0,0,14,230,1,0,0,0,16,232,
		1,0,0,0,18,234,1,0,0,0,20,242,1,0,0,0,22,257,1,0,0,0,24,259,1,0,0,0,26,
		27,3,8,4,0,27,1,1,0,0,0,28,31,3,6,3,0,29,31,3,0,0,0,30,28,1,0,0,0,30,29,
		1,0,0,0,31,3,1,0,0,0,32,33,5,1,0,0,33,34,5,6,0,0,34,44,5,17,0,0,35,39,
		3,6,3,0,36,38,5,24,0,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,
		1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,42,35,1,0,0,0,43,46,1,0,0,0,44,42,
		1,0,0,0,44,45,1,0,0,0,45,47,1,0,0,0,46,44,1,0,0,0,47,48,5,18,0,0,48,5,
		1,0,0,0,49,50,5,2,0,0,50,51,5,6,0,0,51,61,5,17,0,0,52,56,3,2,1,0,53,55,
		5,24,0,0,54,53,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,60,
		1,0,0,0,58,56,1,0,0,0,59,52,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,
		1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,65,5,18,0,0,65,7,1,0,0,0,66,67,
		5,3,0,0,67,68,5,6,0,0,68,72,5,19,0,0,69,71,5,24,0,0,70,69,1,0,0,0,71,74,
		1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,138,1,0,0,0,74,72,1,0,0,0,75,85,
		3,10,5,0,76,78,5,24,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,
		1,0,0,0,80,86,1,0,0,0,81,79,1,0,0,0,82,84,5,16,0,0,83,82,1,0,0,0,83,84,
		1,0,0,0,84,86,1,0,0,0,85,79,1,0,0,0,85,83,1,0,0,0,86,139,1,0,0,0,87,91,
		5,17,0,0,88,90,5,24,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,
		1,0,0,0,92,108,1,0,0,0,93,91,1,0,0,0,94,104,3,0,0,0,95,97,5,24,0,0,96,
		95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,105,1,0,0,0,100,
		98,1,0,0,0,101,103,5,16,0,0,102,101,1,0,0,0,102,103,1,0,0,0,103,105,1,
		0,0,0,104,98,1,0,0,0,104,102,1,0,0,0,105,107,1,0,0,0,106,94,1,0,0,0,107,
		110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,113,1,0,0,0,110,108,1,
		0,0,0,111,114,3,22,11,0,112,114,3,16,8,0,113,111,1,0,0,0,113,112,1,0,0,
		0,114,118,1,0,0,0,115,117,5,24,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,
		116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,118,1,0,0,0,121,122,5,
		18,0,0,122,139,1,0,0,0,123,126,3,22,11,0,124,126,3,16,8,0,125,123,1,0,
		0,0,125,124,1,0,0,0,126,136,1,0,0,0,127,129,5,24,0,0,128,127,1,0,0,0,129,
		132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,137,1,0,0,0,132,130,1,
		0,0,0,133,135,5,16,0,0,134,133,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,
		136,130,1,0,0,0,136,134,1,0,0,0,137,139,1,0,0,0,138,75,1,0,0,0,138,87,
		1,0,0,0,138,125,1,0,0,0,139,9,1,0,0,0,140,141,5,4,0,0,141,145,3,12,6,0,
		142,144,5,24,0,0,143,142,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,
		1,0,0,0,146,148,1,0,0,0,147,145,1,0,0,0,148,152,5,7,0,0,149,151,5,24,0,
		0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,
		158,1,0,0,0,154,152,1,0,0,0,155,159,3,14,7,0,156,159,3,16,8,0,157,159,
		5,6,0,0,158,155,1,0,0,0,158,156,1,0,0,0,158,157,1,0,0,0,159,160,1,0,0,
		0,160,161,7,0,0,0,161,222,1,0,0,0,162,163,5,4,0,0,163,167,3,12,6,0,164,
		166,5,24,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,
		0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,170,174,5,7,0,0,171,173,5,24,0,0,
		172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,177,
		1,0,0,0,176,174,1,0,0,0,177,181,5,17,0,0,178,180,5,24,0,0,179,178,1,0,
		0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,198,1,0,0,0,183,
		181,1,0,0,0,184,194,3,0,0,0,185,187,5,24,0,0,186,185,1,0,0,0,187,190,1,
		0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,195,1,0,0,0,190,188,1,0,0,0,
		191,193,5,16,0,0,192,191,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,188,
		1,0,0,0,194,192,1,0,0,0,195,197,1,0,0,0,196,184,1,0,0,0,197,200,1,0,0,
		0,198,196,1,0,0,0,198,199,1,0,0,0,199,211,1,0,0,0,200,198,1,0,0,0,201,
		212,3,10,5,0,202,208,3,16,8,0,203,204,5,13,0,0,204,205,3,16,8,0,205,206,
		5,14,0,0,206,208,1,0,0,0,207,202,1,0,0,0,207,203,1,0,0,0,208,212,1,0,0,
		0,209,212,3,14,7,0,210,212,3,24,12,0,211,201,1,0,0,0,211,207,1,0,0,0,211,
		209,1,0,0,0,211,210,1,0,0,0,212,216,1,0,0,0,213,215,5,24,0,0,214,213,1,
		0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,
		218,216,1,0,0,0,219,220,5,18,0,0,220,222,1,0,0,0,221,140,1,0,0,0,221,162,
		1,0,0,0,222,11,1,0,0,0,223,227,5,6,0,0,224,226,5,6,0,0,225,224,1,0,0,0,
		226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,13,1,0,0,0,229,227,
		1,0,0,0,230,231,5,5,0,0,231,15,1,0,0,0,232,233,3,18,9,0,233,17,1,0,0,0,
		234,239,3,20,10,0,235,236,7,1,0,0,236,238,3,20,10,0,237,235,1,0,0,0,238,
		241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,19,1,0,0,0,241,239,1,0,
		0,0,242,247,3,22,11,0,243,244,7,2,0,0,244,246,3,22,11,0,245,243,1,0,0,
		0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,21,1,0,0,0,249,247,
		1,0,0,0,250,258,3,10,5,0,251,252,5,13,0,0,252,253,3,16,8,0,253,254,5,14,
		0,0,254,258,1,0,0,0,255,258,5,5,0,0,256,258,3,24,12,0,257,250,1,0,0,0,
		257,251,1,0,0,0,257,255,1,0,0,0,257,256,1,0,0,0,258,23,1,0,0,0,259,260,
		5,6,0,0,260,25,1,0,0,0,39,30,39,44,56,61,72,79,83,85,91,98,102,104,108,
		113,118,125,130,134,136,138,145,152,158,167,174,181,188,192,194,198,207,
		211,216,221,227,239,247,257
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
