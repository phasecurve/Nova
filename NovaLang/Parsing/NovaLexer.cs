//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Nova.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NovaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PACKAGE=1, MODULE=2, LET=3, I16=4, ID=5, PLUS=6, MINUS=7, MULT=8, DIV=9, 
		MOD=10, LPAR=11, RPAR=12, COLON=13, SEMI=14, LBRA=15, RBRA=16, EQ=17, 
		LT=18, GT=19, LTE=20, GTE=21, NEWLINE=22, WS=23;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PACKAGE", "MODULE", "LET", "I16", "ID", "PLUS", "MINUS", "MULT", "DIV", 
		"MOD", "LPAR", "RPAR", "COLON", "SEMI", "LBRA", "RBRA", "EQ", "LT", "GT", 
		"LTE", "GTE", "NEWLINE", "WS"
	};


	public NovaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NovaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'package'", "'module'", "'let'", null, null, "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'('", "')'", "':'", "';'", "'{'", "'}'", "'='", "'<'", 
		"'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PACKAGE", "MODULE", "LET", "I16", "ID", "PLUS", "MINUS", "MULT", 
		"DIV", "MOD", "LPAR", "RPAR", "COLON", "SEMI", "LBRA", "RBRA", "EQ", "LT", 
		"GT", "LTE", "GTE", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nova.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NovaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,23,126,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,2,1,2,1,2,1,2,1,3,4,3,68,8,3,11,3,12,3,69,1,4,1,4,5,4,74,8,4,10,
		4,12,4,77,9,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
		11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,
		18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,3,21,114,8,21,1,21,1,21,1,21,1,21,
		1,22,4,22,121,8,22,11,22,12,22,122,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,1,0,4,1,0,48,57,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,129,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,
		0,3,55,1,0,0,0,5,62,1,0,0,0,7,67,1,0,0,0,9,71,1,0,0,0,11,78,1,0,0,0,13,
		80,1,0,0,0,15,82,1,0,0,0,17,84,1,0,0,0,19,86,1,0,0,0,21,88,1,0,0,0,23,
		90,1,0,0,0,25,92,1,0,0,0,27,94,1,0,0,0,29,96,1,0,0,0,31,98,1,0,0,0,33,
		100,1,0,0,0,35,102,1,0,0,0,37,104,1,0,0,0,39,106,1,0,0,0,41,109,1,0,0,
		0,43,113,1,0,0,0,45,120,1,0,0,0,47,48,5,112,0,0,48,49,5,97,0,0,49,50,5,
		99,0,0,50,51,5,107,0,0,51,52,5,97,0,0,52,53,5,103,0,0,53,54,5,101,0,0,
		54,2,1,0,0,0,55,56,5,109,0,0,56,57,5,111,0,0,57,58,5,100,0,0,58,59,5,117,
		0,0,59,60,5,108,0,0,60,61,5,101,0,0,61,4,1,0,0,0,62,63,5,108,0,0,63,64,
		5,101,0,0,64,65,5,116,0,0,65,6,1,0,0,0,66,68,7,0,0,0,67,66,1,0,0,0,68,
		69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,8,1,0,0,0,71,75,7,1,0,0,72,74,
		7,2,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,10,
		1,0,0,0,77,75,1,0,0,0,78,79,5,43,0,0,79,12,1,0,0,0,80,81,5,45,0,0,81,14,
		1,0,0,0,82,83,5,42,0,0,83,16,1,0,0,0,84,85,5,47,0,0,85,18,1,0,0,0,86,87,
		5,37,0,0,87,20,1,0,0,0,88,89,5,40,0,0,89,22,1,0,0,0,90,91,5,41,0,0,91,
		24,1,0,0,0,92,93,5,58,0,0,93,26,1,0,0,0,94,95,5,59,0,0,95,28,1,0,0,0,96,
		97,5,123,0,0,97,30,1,0,0,0,98,99,5,125,0,0,99,32,1,0,0,0,100,101,5,61,
		0,0,101,34,1,0,0,0,102,103,5,60,0,0,103,36,1,0,0,0,104,105,5,62,0,0,105,
		38,1,0,0,0,106,107,5,60,0,0,107,108,5,61,0,0,108,40,1,0,0,0,109,110,5,
		62,0,0,110,111,5,61,0,0,111,42,1,0,0,0,112,114,5,13,0,0,113,112,1,0,0,
		0,113,114,1,0,0,0,114,115,1,0,0,0,115,116,5,10,0,0,116,117,1,0,0,0,117,
		118,6,21,0,0,118,44,1,0,0,0,119,121,7,3,0,0,120,119,1,0,0,0,121,122,1,
		0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,124,1,0,0,0,124,125,6,22,0,0,
		125,46,1,0,0,0,5,0,69,75,113,122,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
